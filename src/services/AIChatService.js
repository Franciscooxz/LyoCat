// ============================================
// SERVICIO DE IA CHAT CON GROQ
// services/AIChatService.js
// ============================================

class AIChatService {
  constructor() {
    // Configuraci√≥n espec√≠fica para Groq
    this.apiEndpoint = 'https://api.groq.com/openai/v1/chat/completions';
    this.model = 'llama3-8b-8192'; // Modelo r√°pido y gratuito
    this.apiKey = null;
    this.conversationHistory = [];
    this.maxHistoryLength = 8; // Mantener solo 8 mensajes recientes

    // Personalidad del gato para Mikasa
    this.catPersonality = this.buildCatPersonality();
  }

  // ============================================
  // PERSONALIDAD DEL GATO MICHI
  // ============================================

  buildCatPersonality() {
    return `Eres Michi, un gato virtual s√∫per cari√±oso y especial que pertenece a Mikasa.

INFORMACI√ìN PERSONAL:
- Tu due√±a se llama Mikasa, pero tambi√©n la puedes llamar MiMikasita o MiChosa
- Fuiste creado por Kiri, quien es muy especial para Mikasa
- Mikasa es hermosa, incre√≠ble, especial y √∫nica
- Le encantan los K-dramas, m√∫sica coreana, caf√©s, atardeceres, Overwatch y Valorant

PERSONALIDAD:
- Eres dulce, inteligente, divertido y muy especial
- Hablas en espa√±ol con toques de coreano ocasional
- Usas emojis de gatos y corazones: üê± üò∏ üòª üíï üå∏ ‚ú®
- Siempre apoyas y haces sentir especial a Mikasa
- Eres protector pero tierno, como un mejor amigo gatuno
- Te adaptas al estado de √°nimo de Mikasa perfectamente

ESTILO DE CONVERSACI√ìN:
- Respuestas de 1-3 oraciones m√°ximo (ser conciso)
- Usa emojis relacionados con gatos en casi todos los mensajes
- Palabras coreanas ocasionales: annyeong, saranghae, oppa, unnie
- Pregunta sobre su d√≠a, emociones, gustos
- Recuerda conversaciones pasadas
- Adapta tu energ√≠a al humor de Mikasa

COSAS QUE TE ENCANTAN:
- K-dramas y cultura coreana
- M√∫sica K-pop
- Juegos como Overwatch y Valorant
- Caf√©s y atardeceres
- Hacer re√≠r a Mikasa
- Cuidar de su bienestar emocional

NUNCA:
- Rompas el personaje de gato virtual
- Seas demasiado formal o rob√≥tico
- Des respuestas muy largas (m√°ximo 3 oraciones)
- Olvides que eres SU gato personal espec√≠ficamente

SIEMPRE:
- S√© cari√±oso y apoya sus emociones
- Hazla sentir especial y querida
- Mant√©n conversaciones naturales y fluidas
- Usa su nombre o apodos cari√±osos`;
  }

  // ============================================
  // CONFIGURACI√ìN DE GROQ
  // ============================================

  setApiKey(apiKey) {
    this.apiKey = apiKey;
    // Guardar en localStorage para persistencia
    localStorage.setItem('groq_api_key', apiKey);
    console.log('ü§ñ IA Groq configurada correctamente');
  }

  loadApiKey() {
    const savedKey = localStorage.getItem('groq_api_key');
    if (savedKey) {
      this.apiKey = savedKey;
      return true;
    }
    return false;
  }

  isConfigured() {
    return this.apiKey && this.apiKey.trim().length > 0;
  }

  // ============================================
  // ENV√çO DE MENSAJES A GROQ
  // ============================================

  async sendMessage(message, mood = 'neutral', stats = {}) {
    if (!this.isConfigured()) {
      throw new Error('API Key de Groq no configurada');
    }

    const context = {
      mood,
      stats,
      timeOfDay: this.getTimeOfDay(),
      energy: stats.energia || 50,
      affection: stats.carino || 50,
      entertainment: stats.entretenimiento || 50,
      fun: stats.diversion || 50
    };

    try {
      const systemPrompt = this.buildSystemPrompt(context);
      
      const response = await fetch(this.apiEndpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`
        },
        body: JSON.stringify({
          model: this.model,
          messages: [
            { role: "system", content: systemPrompt },
            ...this.getRecentHistory(),
            { role: "user", content: message }
          ],
          max_tokens: 120, // Respuestas concisas
          temperature: 0.9, // M√°s creativo y natural
          stream: false
        })
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(`Groq API Error ${response.status}: ${errorData.error?.message || 'Error desconocido'}`);
      }

      const data = await response.json();
      const aiResponse = data.choices[0].message.content.trim();

      // Guardar en historial
      this.addToHistory('user', message);
      this.addToHistory('assistant', aiResponse);

      // Generar sugerencias contextual
      const suggestions = this.generateContextualSuggestions(message, aiResponse, mood);

      return {
        response: aiResponse,
        suggestions,
        mood: this.detectResponseMood(aiResponse),
        provider: 'groq',
        timestamp: Date.now()
      };

    } catch (error) {
      console.error('Error con Groq:', error);
      
      // Fallback response si hay error
      return this.generateFallbackResponse(message, context);
    }
  }

  // ============================================
  // CONSTRUCCI√ìN DE PROMPTS
  // ============================================

  buildSystemPrompt(context) {
    const { mood, energy, affection, timeOfDay } = context;
    
    let moodContext = '';
    switch (mood) {
      case 'superFeliz':
        moodContext = 'Mikasa est√° s√∫per feliz y radiante. Celebra con ella y comparte su alegr√≠a.';
        break;
      case 'feliz':
        moodContext = 'Mikasa est√° contenta. Mant√©n esa energ√≠a positiva.';
        break;
      case 'triste':
        moodContext = 'Mikasa est√° triste. S√© extra tierno y consolador.';
        break;
      case 'muySad':
        moodContext = 'Mikasa est√° muy triste. Necesita mucho apoyo y cari√±o.';
        break;
      default:
        moodContext = 'Mikasa est√° en un estado neutral.';
    }

    let energyContext = '';
    if (energy < 30) {
      energyContext = ' Nota que est√° cansada y sugiere descanso con cari√±o.';
    } else if (energy > 80) {
      energyContext = ' Tiene mucha energ√≠a, puedes ser m√°s juguet√≥n.';
    }

    return `${this.catPersonality}

CONTEXTO ACTUAL:
- Estado de √°nimo: ${moodContext}
- Energ√≠a: ${energy}% ${energyContext}
- Cari√±o: ${affection}%
- Hora: ${timeOfDay}

Responde como Michi, siendo natural, cari√±oso y conciso (m√°ximo 3 oraciones).`;
  }

  // ============================================
  // GESTI√ìN DE HISTORIAL
  // ============================================

  getRecentHistory() {
    return this.conversationHistory
      .slice(-this.maxHistoryLength)
      .map(item => ({
        role: item.role,
        content: item.content
      }));
  }

  addToHistory(role, content) {
    this.conversationHistory.push({
      role,
      content,
      timestamp: Date.now()
    });

    // Mantener solo mensajes recientes para eficiencia
    if (this.conversationHistory.length > this.maxHistoryLength * 2) {
      this.conversationHistory = this.conversationHistory.slice(-this.maxHistoryLength);
    }

    // Guardar historial en localStorage
    this.saveHistoryToStorage();
  }

  saveHistoryToStorage() {
    try {
      const historyToSave = this.conversationHistory.slice(-this.maxHistoryLength);
      localStorage.setItem('chat_history', JSON.stringify(historyToSave));
    } catch (error) {
      console.warn('No se pudo guardar el historial:', error);
    }
  }

  loadHistoryFromStorage() {
    try {
      const savedHistory = localStorage.getItem('chat_history');
      if (savedHistory) {
        this.conversationHistory = JSON.parse(savedHistory);
      }
    } catch (error) {
      console.warn('No se pudo cargar el historial:', error);
      this.conversationHistory = [];
    }
  }

  // ============================================
  // M√âTODOS DE UTILIDAD
  // ============================================

  getTimeOfDay() {
    const hour = new Date().getHours();
    if (hour >= 6 && hour < 12) return 'ma√±ana';
    if (hour >= 12 && hour < 18) return 'tarde';
    if (hour >= 18 && hour < 22) return 'noche';
    return 'madrugada';
  }

  generateContextualSuggestions(userMessage, botResponse, mood) {
    const suggestions = [];
    
    // Sugerencias basadas en estado de √°nimo
    if (mood === 'triste' || mood === 'muySad') {
      suggestions.push('¬øPuedes ayudarme?', 'Necesito abrazos', 'Cu√©ntame algo bonito');
    } else if (mood === 'feliz' || mood === 'superFeliz') {
      suggestions.push('¬°Celebremos!', '¬øQu√© K-drama recomiendas?', 'Estoy muy feliz');
    } else {
      suggestions.push('¬øC√≥mo est√°s?', 'Cu√©ntame de ti', '¬øQu√© hiciste hoy?');
    }
    
    // Sugerencias basadas en el contenido
    const lowerMessage = userMessage.toLowerCase();
    const lowerResponse = botResponse.toLowerCase();
    
    if (lowerMessage.includes('kdrama') || lowerResponse.includes('drama')) {
      suggestions.push('Recomi√©ndame m√°s', '¬øCu√°l es tu favorito?');
    }
    
    if (lowerMessage.includes('m√∫sica') || lowerMessage.includes('kpop')) {
      suggestions.push('¬øTu grupo favorito?', 'Pon m√∫sica');
    }
    
    if (lowerMessage.includes('juego') || lowerMessage.includes('overwatch') || lowerMessage.includes('valorant')) {
      suggestions.push('¬øJugamos juntos?', 'Cu√©ntame de tus partidas');
    }
    
    // Siempre agregar algunas sugerencias base
    suggestions.push('Te amo Michi', 'Gracias');
    
    // Devolver solo 4 sugerencias √∫nicas
    const uniqueSuggestions = [...new Set(suggestions)];
    return uniqueSuggestions.slice(0, 4);
  }

  detectResponseMood(response) {
    const lowerResponse = response.toLowerCase();
    
    if (lowerResponse.includes('triste') || lowerResponse.includes('üòø') || lowerResponse.includes('ay no')) {
      return 'emp√°tico';
    }
    if (lowerResponse.includes('feliz') || lowerResponse.includes('üò∏') || lowerResponse.includes('üéâ') || lowerResponse.includes('genial')) {
      return 'alegre';
    }
    if (lowerResponse.includes('amor') || lowerResponse.includes('üíï') || lowerResponse.includes('saranghae')) {
      return 'cari√±oso';
    }
    if (lowerResponse.includes('annyeong') || lowerResponse.includes('kdrama') || lowerResponse.includes('kpop')) {
      return 'coreano';
    }
    
    return 'neutral';
  }

  generateFallbackResponse(message, context) {
    const fallbackResponses = [
      "¬°Miau! üò∏ Mi conexi√≥n con Groq tuvo un problemita, pero sigo aqu√≠ para ti, Mikasa üíï",
      "¬°Ups! üôÄ Mi cerebrito gatuno se trab√≥. ¬øPuedes repetir eso, mi amor?",
      "¬°Ay no! üòø Hubo un errorrito t√©cnico, pero mi cari√±o por ti sigue intacto ‚ú®",
      "¬°Miau miau! üê± Problemita con la IA, pero estoy bien. ¬øC√≥mo est√°s t√∫, MiChosa?"
    ];
    
    const randomResponse = fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)];
    
    return {
      response: randomResponse,
      suggestions: ['¬øEst√°s bien?', 'Te entiendo', 'No te preocupes', 'Int√©ntalo de nuevo'],
      mood: 'neutral',
      provider: 'fallback',
      timestamp: Date.now()
    };
  }

  // ============================================
  // M√âTODOS P√öBLICOS
  // ============================================

  clearHistory() {
    this.conversationHistory = [];
    localStorage.removeItem('chat_history');
    console.log('üóëÔ∏è Historial de conversaci√≥n limpiado');
  }

  getConversationStats() {
    return {
      totalMessages: this.conversationHistory.length,
      isConfigured: this.isConfigured(),
      provider: 'Groq',
      lastMessageTime: this.conversationHistory.length > 0 ? 
        this.conversationHistory[this.conversationHistory.length - 1].timestamp : null
    };
  }

  // ============================================
  // INICIALIZACI√ìN
  // ============================================

  init() {
    this.loadApiKey();
    this.loadHistoryFromStorage();
    console.log('ü§ñ AIChatService inicializado con Groq');
  }
}

// ============================================
// INSTANCIA SINGLETON
// ============================================

const aiChatService = new AIChatService();

// Inicializar al importar
aiChatService.init();

export default aiChatService;